class Solution {
public:
    vector<string> result;
    
    void DFS(string s, string num, string ip, int idx, int depth) {
        if (s.length() == idx && depth == 0) {
            ip.pop_back();
            result.push_back(ip);
            return;
        }
        
        for (int i = idx; i < s.length(); i++) {
            num += (s[i]);
            if (num.length() > 1 && num[0] == '0') return;
            if (stoi(num) <= 255) {
                if (s.length() - i - 1 > (depth-1) * 3) continue;
                // cout << "num : " << num << " ip : " << ip << endl;
                DFS(s, "", ip + num + ".", i + 1, depth - 1);
            } else {
                // cout << "return info" << endl;
                // cout << "num : " << num << " ip : " << ip << endl;
                // cout << endl;
                return;
            }
        }
        
    }
    
    vector<string> restoreIpAddresses(string s) {
        DFS(s, "", "", 0, 4);
        // for (auto s : result) {
        //     cout << s << endl;
        // }
        
        return result;
    }
};

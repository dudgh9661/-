#include <iostream>
#include <vector>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <string>
#include <queue>
#include <set>
 
 
using namespace std;
 
int T, n;
int ans = 999999999;
int map[100][100];
int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };
 
void bfs(int row, int col) {
 
    queue<pair<int, int>>q;
 
     
 
    q.push(make_pair(row,col));
    int dist[100][100];
 
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dist[i][j] = 999999;
        }
    }
 
    dist[row][col] = map[row][col];
     
 
    while (!q.empty()) {
        row = q.front().first;
        col = q.front().second;
        q.pop();
 
        for (int i = 0; i < 4; i++) {
            int nx = row + dx[i];
            int ny = col + dy[i];
            if (nx >= 0 && ny >= 0 && nx < n && ny < n) {
                if (dist[nx][ny] > dist[row][col] + map[nx][ny]) {
                    dist[nx][ny] = dist[row][col] + map[nx][ny];
                    q.push(make_pair(nx,ny));
                }
            }
        }
 
 
    }
 
 
    ans = dist[n - 1][n - 1];
 
 
}
 
void go() {
 
    bfs(0, 0);
 
}
 
int main() {
 
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
 
    //freopen("input.txt", "r", stdin);
 
    cin >> T;
 
    for (int test_case = 1; test_case <= T; test_case++) {
        memset(map, 0, sizeof(map));
        cin >> n;
 
        for (int i = 0; i < n; i++) {
            string s;
            cin >> s;
            for (int j = 0; j < n; j++) {
                map[i][j] = (int)(s[j] - '0');
            }
        }
 
 
        go();
         
        cout << "#" << test_case << " "<< ans<<'\n';
    }
 
 
    return 0;
}